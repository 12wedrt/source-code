source code using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace CharacterRPG
{
    // Simple 2D position
    public struct Pos
    {
        public int X;
        public int Y;
        public Pos(int x, int y) { X = x; Y = y; }
        public override string ToString() => $"({X}, {Y})";
    }

    public class Enemy
    {
    public string Name { get; set; }
    public int Health { get; set; }
    public int Attack { get; set; }
    public int Defense { get; set; }
    public string Type { get; set; }
    public string SpritePath { get; set; }

        protected static readonly Random Rng = new Random();

        public Enemy(string name, int health, int attack, int defense, string type, string spritePath = null)
        {
            Name = name;
            Health = health;
            Attack = attack;
            Defense = defense;
            Type = type;
            SpritePath = spritePath;
        }

        public virtual void TakeDamage(int rawDamage)
        {
            var damage = Math.Max(0, rawDamage - Defense);
            Health -= damage;
            if (Health <= 0) Console.WriteLine($"{Name} has been defeated!");
            else Console.WriteLine($"{Name} has {Health} health remaining.");
        }

        public virtual void AttackPlayer(Character p)
        {
            int roll = Rng.Next(1, Attack + 1);
                bool isCrit = Rng.NextDouble() < 0.2; // 20% crit chance
                int damage = isCrit ? roll * 2 : roll;
                if (isCrit)
                    Console.WriteLine($"{Name} lands a CRITICAL HIT on {e.Name} for {damage} damage!");
                else
                    Console.WriteLine($"{Name} attacks {e.Name} for {damage} damage!");
                e.TakeDamage(damage);
        }
    }

    // Evolved Demon enemy with enhanced stats and special ability
    public class EvolvedDemon : Enemy
    {
        public bool HasRegenerated { get; set; } = false;
        public EvolvedDemon() : base("Evolved Demon", 300, 200, 50, "EvolvedDemiGod") { }

        public override void TakeDamage(int rawDamage)
        {
            base.TakeDamage(rawDamage);
            if (Health <= 0 && !HasRegenerated)
            {
                Health = 100;
                HasRegenerated = true;
                Console.WriteLine("The Evolved Demon regenerates with 100 health! You must defeat it again.");
            }
        }
    }

    public class NPC
    {
        public string Name { get; set; }
        public bool HasQuest { get; set; }
        public bool QuestCompleted { get; set; }

        private static readonly Random Rng = new Random();

        public NPC(string name, bool quest)
        {
            Name = name;
            HasQuest = quest;
            QuestCompleted = false;
        }

        public void Interact(Character p)
        {
            Console.WriteLine($"You talk to {Name}.");
            if (HasQuest && !QuestCompleted)
            {
                Console.WriteLine($"{Name}: I have a task for you. Do you accept? (y/n)");
                var ans = Console.ReadLine();
                if (ans?.ToLower() == "y")
                {
                    QuestCompleted = true;
                    // Give random gold reward
                    int reward = RollQuestReward();
                    p.Gold += reward;
                    Console.WriteLine($"Quest completed! {Name} gives you {reward} gold.");
                }
                else Console.WriteLine($"You declined {Name}'s quest.");
            }
            else
            {
                Console.WriteLine($"{Name}: Hello adventurer!");
            }
        }

        private int RollQuestReward()
        {
            double chance = Rng.NextDouble();
            if (chance < 0.001) return 200; // 0.1% chance
            else if (chance < 0.05) return 100;
            else if (chance < 0.2) return 50;
            else return 10;
        }
    }

    public class Character
    {
    public string Name { get; set; }
    public int Health { get; set; }
    public int MaxHealth { get; set; }
    public int Attack { get; set; }
    public int Defense { get; set; }
    public int Magic { get; set; }
    public int Level { get; set; }
    public int Exp { get; set; }
    public List<string> Inventory { get; set; } = new();
    public int Gold { get; set; }
    public List<string> Quests { get; set; } = new();
    public Pos Position { get; set; }
    public List<string> Allies { get; set; } = new();
    public int Kills { get; set; } = 0;

    // Sprite paths for player actions
    public string SpriteShadowDeath { get; set; }
    public string SpriteShadowSingle { get; set; }
    public string SpriteAttack { get; set; }
    public string SpriteDeath { get; set; }
    public string SpriteHurt { get; set; }
    public string SpriteIdle { get; set; }
    public string SpriteRunAttack { get; set; }
    public string SpriteRun { get; set; }
    public string SpriteWalkAttack { get; set; }
    public string SpriteWalk { get; set; }

        private static readonly Random Rng = new Random();

        public Character(string name, int health, int attack, int defense, int magic)
        {
            Name = name; Health = health; MaxHealth = health; Attack = attack; Defense = defense; Magic = magic;
            Level = 1; Exp = 0; Gold = 100; Position = new Pos(1, 1);
            // Initialize sprite paths
            SpriteShadowDeath = "player folder/shadow_death.png";
            SpriteShadowSingle = "player folder/shadow_single.png";
            SpriteAttack = "player folder/Swordsman_lvl3_attack_without_shadow.png";
            SpriteDeath = "player folder/Swordsman_lvl3_Death_without_shadow.png";
            SpriteHurt = "player folder/Swordsman_lvl3_Hurt_without_shadow.png";
            SpriteIdle = "player folder/Swordsman_lvl3_Idle_without_shadow.png";
            SpriteRunAttack = "player folder/Swordsman_lvl3_Run_Attack_without_shadow.png";
            SpriteRun = "player folder/Swordsman_lvl3_Run_without_shadow.png";
            SpriteWalkAttack = "player folder/Swordsman_lvl3_Walk_Attack_without_shadow.png";
            SpriteWalk = "player folder/Swordsman_lvl3_Walk_without_shadow.png";
        }

        public void TakeDamage(int rawDamage)
        {
            var damage = Math.Max(0, rawDamage - Defense);
            Health -= damage;
            if (Health <= 0) Console.WriteLine($"{Name} has been defeated!");
            else Console.WriteLine($"{Name} has {Health} health remaining.");
        }

        public void AttackEnemy(Enemy e)
        {
            int roll = Rng.Next(1, Attack + 1);
                bool isCrit = Rng.NextDouble() < 0.2; // 20% crit chance
                int damage = isCrit ? roll * 2 : roll;
                if (isCrit)
                    Console.WriteLine($"{Name} lands a CRITICAL HIT on {p.Name} for {damage} damage!");
                else
                    Console.WriteLine($"{Name} attacks {p.Name} for {damage} damage!");
                p.TakeDamage(damage);
        }

        public void UseMagic(Enemy e)
        {
            if (Magic > 0)
            {
                int dmg = Rng.Next(5, 11); // 5-10
                Console.WriteLine($"{Name} casts a spell on {e.Name} for {dmg} damage!");
                e.TakeDamage(dmg);
                Magic--;
            }
            else Console.WriteLine("Not enough magic points!");
        }

        public void GainExp(int amount)
        {
            Exp += amount;
            Console.WriteLine($"{Name} gained {amount} experience points!");
            if (Exp >= Level * 10) LevelUp();
        }

        public void LevelUp()
        {
            Level++;
            MaxHealth += 10;
            Health = MaxHealth;
            Attack += 2;
            Defense += 1;
            Magic += 2;
            Exp = 0;
            Console.WriteLine($"{Name} leveled up to level {Level}!");
        }

        public void AddItem(string item)
        {
            Inventory.Add(item);
            Console.WriteLine($"{item} added to inventory!");
        }

        public void UseItem(string item)
        {
            var idx = Inventory.FindIndex(i => string.Equals(i, item, StringComparison.OrdinalIgnoreCase));
            if (idx >= 0)
            {
                if (string.Equals(item, "Health Potion", StringComparison.OrdinalIgnoreCase))
                {
                    int before = Health;
                    Health = Math.Min(MaxHealth, Health + 20);
                    Console.WriteLine($"{Name} used a Health Potion and restored {Health - before} health!");
                }
                else if (string.Equals(item, "Ambrosia", StringComparison.OrdinalIgnoreCase))
                {
                    Health = MaxHealth;
                    Magic += 5;
                    Console.WriteLine($"{Name} used Ambrosia and restored all health and gained +5 magic!");
                }
                Inventory.RemoveAt(idx);
            }
            else Console.WriteLine($"{item} not found in inventory!");
        }

        public void AddQuest(string q)
        {
            Quests.Add(q);
            Console.WriteLine($"New quest added: {q}");
        }

        public void CompleteQuest(string name)
        {
            int idx = Quests.FindIndex(q => string.Equals(q, name, StringComparison.OrdinalIgnoreCase));
            if (idx >= 0)
            {
                Gold += 50;
                GainExp(100);
                Console.WriteLine($"Quest '{name}' completed! You gained 50 gold and 100 EXP.");
                Quests.RemoveAt(idx);
            }
            else Console.WriteLine($"Quest '{name}' not found!");
        }

        public void Becomethekingofthemortals()
        {
            Console.WriteLine("You have activated the cheat code and become the King of all Mortals!");
            Health = 9999; MaxHealth = 9999; Attack = 999; Defense = 999; Magic = 999; Level = 100; Exp = 0; Gold = 999_999;
        }
    }

    public static class Data
    {
        public static readonly List<List<string>> WorldMap = new()
        {
            new() { "Temple",  "Forest",  "Cave" },
            new() { "Town",    "Plains",  "Dungeon" },
            new() { "Mountain","Lake",    "Castle" },
            new() { "Hell",    "",        "" }
        };
    }

    public static class Gameplay
    {
        private static readonly Random Rng = new Random();

        public static void Battle(Character player, Enemy enemy)
        {
            Console.WriteLine($"A wild {enemy.Name} ({enemy.Type}) appears!");
            while (player.Health > 0 && enemy.Health > 0)
            {
                Console.WriteLine("1) Attack 2) Magic 3) Run");
                var input = Console.ReadLine();
                if (input == "1")
                {
                    player.AttackEnemy(enemy);
                    if (enemy.Health <= 0) break;
                    enemy.AttackPlayer(player);
                }
                else if (input == "2")
                {
                    player.UseMagic(enemy);
                    if (enemy.Health <= 0) break;
                    enemy.AttackPlayer(player);
                }
                else if (input == "3")
                {
                    Console.WriteLine("You ran away!");
                    return;
                }
            }
            if (enemy.Health <= 0)
            {
                player.Kills++;
                int goldFound = Rng.Next(1, 6);
                player.Gold += goldFound;
                Console.WriteLine($"You defeated {enemy.Name}! Total kills: {player.Kills}. Found {goldFound} gold.");
                // Achievement logic for Demigod
                if (enemy.Name == "Hades") player.AddQuest("Defeated Hades");
                if (enemy.Name == "Demon") player.AddQuest("Defeated Demon");
                if (player.Quests.Contains("Defeated Hades") && player.Quests.Contains("Defeated Demon") && !player.Quests.Contains("Demigod Achievement"))
                {
                    player.AddQuest("Demigod Achievement");
                    Console.WriteLine("Achievement unlocked: Demigod! You can now learn to fly.");
                    // If player is not already a Demigod, transform
                    if (!(player is Demigod))
                    {
                        var name = player.Name;
                        var health = player.Health;
                        var attack = player.Attack;
                        var defense = player.Defense;
                        var magic = player.Magic;
                        var level = player.Level;
                        var exp = player.Exp;
                        var gold = player.Gold;
                        var inventory = new List<string>(player.Inventory);
                        var quests = new List<string>(player.Quests);
                        var position = player.Position;
                        var allies = new List<string>(player.Allies);
                        var kills = player.Kills;
                        // Create new Demigod and copy stats
                        var demigod = new Demigod(name, health, attack, defense, magic)
                        {
                            Level = level,
                            Exp = exp,
                            Gold = gold,
                            Inventory = inventory,
                            Quests = quests,
                            Position = position,
                            Allies = allies,
                            Kills = kills
                        };
                        Console.WriteLine($"{name} has ascended to Demigod status!");
                        // Optionally, allow to learn to fly immediately
                        demigod.LearnToFly();
                    }
                }
            }
        }

        public static void DisplayMap(Character p)
        {
            Console.WriteLine("World Map:");
            for (int y = 0; y < Data.WorldMap.Count; y++)
            {
                for (int x = 0; x < Data.WorldMap[y].Count; x++)
                {
                    var cell = Data.WorldMap[y][x];
                    if (x == p.Position.X && y == p.Position.Y) Console.Write("[P]");
                    else Console.Write(string.IsNullOrWhiteSpace(cell) ? " . " : "[ ]");
                }
                Console.WriteLine();
            }
            Console.WriteLine($"You are at {p.Position}. {SafeGetLocationName(p.Position)}");
        }

        public static string SafeGetLocationName(Pos pos)
        {
            if (pos.Y >= 0 && pos.Y < Data.WorldMap.Count && pos.X >= 0 && pos.X < Data.WorldMap[pos.Y].Count)
                return Data.WorldMap[pos.Y][pos.X];
            return string.Empty;
        }

        public static void Move(Character p, string dir)
        {
            var newPos = p.Position;
            if (dir == "w") newPos.Y = Math.Max(0, newPos.Y - 1);
            else if (dir == "s") newPos.Y = Math.Min(Data.WorldMap.Count - 1, newPos.Y + 1);
            else if (dir == "a") newPos.X = Math.Max(0, newPos.X - 1);
            else if (dir == "d") newPos.X = Math.Min(Data.WorldMap[newPos.Y].Count - 1, newPos.X + 1);
            p.Position = newPos;
            var loc = SafeGetLocationName(newPos);

            if (loc == "Hell")
            {
                if (p.Kills < 20)
                {
                    Console.WriteLine("You cannot enter Hell until you have killed 20 enemies!");
                    p.Position = new Pos(1, 1);
                    return;
                }
                Console.WriteLine("You step into Hell. A demon awaits...");
                var demon = new Enemy("Demon", 150, 100, 20, "DemiGod", "demon_sprite.png"); // Attach sprite
                Battle(p, demon);
                if (demon.Health <= 0)
                {
                    Console.WriteLine("But wait... the Evolved Demon emerges from the shadows!");
                    var evolvedDemon = new EvolvedDemon();
                    Battle(p, evolvedDemon);
                    if (evolvedDemon.Health <= 0)
                    {
                        p.AddQuest("Defeated Evolved Demon");
                        Console.WriteLine("You have defeated the Evolved Demon! Legendary achievement unlocked.");
                    }
                }
            }
            else
            {
                Console.WriteLine($"You moved to {loc}");
                // Chance for NPC encounter in Town/Plains/Castle
                if (loc == "Town" || loc == "Plains" || loc == "Castle")
                {
                    if (Rng.NextDouble() < 0.5) // 50% chance
                    {
                        var npc = new NPC($"Villager_{Rng.Next(1000)}", true);
                        npc.Interact(p);
                    }
                }
            }
        }
    }

    public class Program
    {
        // Greek Gods
        public static Dictionary<string, Dictionary<string, string>> greekGods = new Dictionary<string, Dictionary<string, string>> {
            { "Zeus", new Dictionary<string, string> {
                { "dialogue", "I am Zeus, king of the gods. Prove your worth, and I shall grant you my thunderbolt!" },
                { "item", "Thunderbolt" },
                { "attack_bonus", "10" }
            }},
            { "Poseidon", new Dictionary<string, string> {
                { "dialogue", "I am Poseidon, ruler of the seas. Earn my favor, and I shall grant you my trident!" },
                { "item", "Trident" },
                { "defense_bonus", "10" }
            }},
            { "Hades", new Dictionary<string, string> {
                { "dialogue", "I am Hades, lord of the underworld. Challenge me, and you shall face eternal darkness!" },
                { "enemy", "true" },
                { "health", "200" },
                { "attack", "20" },
                { "defense", "15" }
            }},
            // ...existing gods...
            { "Tyche", new Dictionary<string, string> {
                { "dialogue", "I am Tyche, goddess of fortune. Test your luck, and I shall grant you my wheel!" },
                { "item", "Wheel of Tyche" },
                { "gold_bonus", "50" }
            }},
            { "Demon", new Dictionary<string, string> {
                { "dialogue", "I am the strongest demon other than Hades. I am a demigod, and if you want my sword you will need to fight me first to get it." },
                { "health", "150" },
                { "attack", "100" },
                { "luck", "90" },
                { "item", "Demon Sword" },
                { "attack_bonus", "100" },
                { "health_bonus", "50" }
            }}
        };
        public static void Main()
        {
            var hero = new Character("Hero", 100, 10, 5, 5);
            bool running = true;
            while (running && hero.Health > 0)
            {
                Console.WriteLine("Menu: 1) Move 2) Battle 3) Map 4) Quit");
                var input = Console.ReadLine();
                if (input == "1")
                {
                    Console.WriteLine("Enter W/A/S/D: ");
                    var dir = Console.ReadLine()?.ToLower();
                    Gameplay.Move(hero, dir);
                }
                else if (input == "2")
                {
                    var enemy = new Enemy("Goblin", 30, 6, 2, "Monster");
                    Gameplay.Battle(hero, enemy);
                }
                else if (input == "3") Gameplay.DisplayMap(hero);
                else if (input == "4") running = false;
            }
        }
    }
}
